[{"C:\\Users\\Aniruddha Sarkar\\Documents\\github\\soundcheck_website\\sound_check\\src\\index.js":"1","C:\\Users\\Aniruddha Sarkar\\Documents\\github\\soundcheck_website\\sound_check\\src\\SoundCheckApp.js":"2","C:\\Users\\Aniruddha Sarkar\\Documents\\github\\soundcheck_website\\sound_check\\src\\reportWebVitals.js":"3","C:\\Users\\Aniruddha Sarkar\\Documents\\github\\soundcheck_website\\sound_check\\src\\components\\resultWindow.jsx":"4","C:\\Users\\Aniruddha Sarkar\\Documents\\github\\soundcheck_website\\sound_check\\src\\components\\codeEditor.jsx":"5","C:\\Users\\Aniruddha Sarkar\\Documents\\github\\soundcheck_website\\sound_check\\src\\components\\toolbar.jsx":"6","C:\\Users\\Aniruddha Sarkar\\Documents\\github\\soundcheck_website\\sound_check\\src\\components\\AudioPlayer.jsx":"7"},{"size":600,"mtime":1610260143075,"results":"8","hashOfConfig":"9"},{"size":3929,"mtime":1613370447272,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":3377,"mtime":1613912367317,"results":"12","hashOfConfig":"9"},{"size":1202,"mtime":1612277469713,"results":"13","hashOfConfig":"9"},{"size":867,"mtime":1612341735874,"results":"14","hashOfConfig":"9"},{"size":5760,"mtime":1615305597335,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"oi141p",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Aniruddha Sarkar\\Documents\\github\\soundcheck_website\\sound_check\\src\\index.js",[],["33","34"],"C:\\Users\\Aniruddha Sarkar\\Documents\\github\\soundcheck_website\\sound_check\\src\\SoundCheckApp.js",["35"],"import React, { Component } from 'react';\r\nimport CodeEditor from './components/codeEditor';\r\nimport ResultWindow from './components/resultWindow';\r\nimport './components/styles/editorStyle.css';\r\nimport './components/styles/playerStyles.css';\r\n\r\nexport class SoundCheckApp extends Component {\r\n    state = {\r\n        inputCode: '',\r\n        isHandlerDragging: false,\r\n        editorWidth: '100px',\r\n        result: {\r\n            'output': 'This is the result tab',\r\n            'scaledSyntax': 'This is the scaled syntax tab',\r\n            'error': false,\r\n            'soundBytes': []\r\n        }\r\n    };\r\n\r\n    handleDragg = event => {\r\n        if(!this.state.isHandlerDragging) {\r\n            return false;\r\n        }\r\n\r\n        let containerOffsetLeft = event.target.offsetLeft;\r\n        let pointerRelativeXpos = event.clientX - containerOffsetLeft;\r\n\r\n        \r\n    };\r\n\r\n    handleSave = event => {\r\n\r\n    };\r\n\r\n    handleRun = inputCode => {\r\n        postSyntax(\r\n            'http://localhost:8084//controller/getSequence/', \r\n            { 'inputCode': inputCode }\r\n        ).then(data => {\r\n            return data.json();\r\n        }).then(data => {\r\n            // console.log(data);\r\n\r\n            const scaledSyntax = data['scaled-syntax'].split('\\n').map((element, index) => {\r\n                let lineStyle = {};\r\n                if(element === '') {\r\n                    lineStyle = {padding: '5px 0'};\r\n                } else if(element.charAt(0) === '\\t') {\r\n                    let count = 4;\r\n                    for(let i = 1; i < element.length && element.charAt(i) === '\\t'; i++) {\r\n                        count += 4;\r\n                    }\r\n                    lineStyle = {paddingLeft: '' + count * 5.6 + 'px'};\r\n                }\r\n\r\n                return <div key={index} style={lineStyle}>{element}</div>;\r\n            });\r\n\r\n            const output = data['output'].split('\\n').map(element => {\r\n                return <div>{element}</div>;\r\n            });\r\n\r\n            console.log(typeof data['volume'], typeof data['duration']);\r\n\r\n            this.setState({\r\n                result: {\r\n                    'scaledSyntax': scaledSyntax,\r\n                    'output': output,\r\n                    'error': data['error'],\r\n                    'notes': data['notes'],\r\n                    'duration': data['duration'],\r\n                    'volume': data['volume'],\r\n                    'frequencies': data['frequencies']\r\n                }\r\n            });\r\n        }).catch(error => {\r\n            this.setState({\r\n                result: {\r\n                    'scaledSyntax': \"\",\r\n                    'output': \"\",\r\n                    'error': true\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='editor-console-container' onMouseMove={this.handleDragg}>\r\n                <CodeEditor \r\n                key=\"code-editor\"\r\n                onRun={this.handleRun}\r\n                onSave={this.handleSave}\r\n                className=\"box\"\r\n                 />\r\n\r\n                <div className=\"handler\" \r\n                    key=\"handler\"\r\n                    onMouseDown={() => this.setState({isHandlerDragging: true})}\r\n                    onMouseUp= {() => this.setState({isHandlerDragging: false})}\r\n                />\r\n\r\n                <ResultWindow key=\"result-window\" className=\"box\" result={this.state.result} />\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nasync function postSyntax(url = '', data = {}) {\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json, text/plain, */*',\r\n            'Content-Type': 'application/json; charset=UTF-8',\r\n        },\r\n        // redirect: 'follow',\r\n        // referrerPolicy: 'no-referrer',\r\n        body: data['inputCode']\r\n    });\r\n\r\n    return response;\r\n}\r\n\r\nexport default SoundCheckApp;\r\n","C:\\Users\\Aniruddha Sarkar\\Documents\\github\\soundcheck_website\\sound_check\\src\\reportWebVitals.js",[],"C:\\Users\\Aniruddha Sarkar\\Documents\\github\\soundcheck_website\\sound_check\\src\\components\\resultWindow.jsx",[],"C:\\Users\\Aniruddha Sarkar\\Documents\\github\\soundcheck_website\\sound_check\\src\\components\\codeEditor.jsx",["36"],"import React, { useRef, useState } from 'react';\r\nimport ToolBar from './toolbar';\r\nimport MonacoEditor from 'react-monaco-editor';\r\n\r\nconst CodeEditor = ({onSave, onRun}) => {\r\n    const options = {\r\n        selectOnLineNumbers: true\r\n    };\r\n\r\n    const [inputCode, setInputCode] = useState('');\r\n\r\n    const handleRun = () => {\r\n        if(inputCode.length === 0) {\r\n            alert('Editor is empty');\r\n        } else {\r\n            console.log(inputCode);\r\n            onRun(inputCode);\r\n        }\r\n    };\r\n\r\n    const handleReset = event => {\r\n        setInputCode('');\r\n    };\r\n\r\n    return (\r\n        <div className='code-editor-container'>\r\n            <ToolBar\r\n            onReset={handleReset}\r\n            onSave={onSave}\r\n            onRun={handleRun}\r\n            />\r\n\r\n            <div className=\"code-input\">\r\n                <MonacoEditor \r\n                    width=\"100%\"\r\n                    height=\"100%\"\r\n                    theme=\"vs-dark\"\r\n                    options={options}\r\n                    onChange={value => setInputCode(value)}\r\n                    value={inputCode}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default CodeEditor;","C:\\Users\\Aniruddha Sarkar\\Documents\\github\\soundcheck_website\\sound_check\\src\\components\\toolbar.jsx",[],"C:\\Users\\Aniruddha Sarkar\\Documents\\github\\soundcheck_website\\sound_check\\src\\components\\AudioPlayer.jsx",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":26,"column":13,"nodeType":"43","messageId":"44","endLine":26,"endColumn":32},{"ruleId":"41","severity":1,"message":"45","line":1,"column":17,"nodeType":"43","messageId":"44","endLine":1,"endColumn":23},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'pointerRelativeXpos' is assigned a value but never used.","Identifier","unusedVar","'useRef' is defined but never used.","no-global-assign","no-unsafe-negation"]